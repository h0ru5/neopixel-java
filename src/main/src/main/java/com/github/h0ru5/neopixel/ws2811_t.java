package com.github.h0ru5.neopixel;
import com.github.h0ru5.neopixel.LibneopixelLibrary.ws2811_device;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : rpi_ws281x\ws2811.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class ws2811_t extends Structure {
	/**
	 * < Private data for driver use<br>
	 * C type : ws2811_device*
	 */
	public ws2811_device device;
	/** < Required output frequency */
	public int freq;
	/** < DMA number _not_ already in use */
	public int dmanum;
	/** C type : ws2811_channel_t[2] */
	public ws2811_channel_t[] channel = new ws2811_channel_t[2];
	public ws2811_t() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("device", "freq", "dmanum", "channel");
	}
	/**
	 * @param device < Private data for driver use<br>
	 * C type : ws2811_device*<br>
	 * @param freq < Required output frequency<br>
	 * @param dmanum < DMA number _not_ already in use<br>
	 * @param channel C type : ws2811_channel_t[2]
	 */
	public ws2811_t(ws2811_device device, int freq, int dmanum, ws2811_channel_t channel[]) {
		super();
		this.device = device;
		this.freq = freq;
		this.dmanum = dmanum;
		if ((channel.length != this.channel.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.channel = channel;
	}
	public static class ByReference extends ws2811_t implements Structure.ByReference {
		
	};
	public static class ByValue extends ws2811_t implements Structure.ByValue {
		
	};
}
